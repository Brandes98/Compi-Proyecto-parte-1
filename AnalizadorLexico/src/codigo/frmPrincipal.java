/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package codigo;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Reader;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
/**
 *
 * @author brand
 */
public class frmPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form frmPrincipal
     */
    public frmPrincipal() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnAnalizar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtResultados = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnAnalizar.setText("Analizar");
        btnAnalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnalizarActionPerformed(evt);
            }
        });

        txtResultados.setColumns(20);
        txtResultados.setRows(5);
        jScrollPane1.setViewportView(txtResultados);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                    .addComponent(btnAnalizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(btnAnalizar, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAnalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnalizarActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
    int returnVal = chooser.showOpenDialog(null);
    
    if (returnVal == JFileChooser.APPROVE_OPTION) {
        File selectedFile = chooser.getSelectedFile();
        
        if (selectedFile == null) {
            System.out.println("Error: El archivo seleccionado es null.");
            return;
        }
        
        System.out.println("Archivo seleccionado: " + selectedFile.getAbsolutePath());
        
        try {
            Reader lector = new BufferedReader(new FileReader(selectedFile));
            Lexer lexer = new Lexer(lector);
            String resultado = "";
            
            // Mapa para almacenar tokens y su información de línea
            Map<String, ArrayList<Integer>> tokenMap = new HashMap<>();
            Map<String, String> tokenTypeMap = new HashMap<>();
            
            int lineNumber = 1;  // Inicializamos el contador de líneas
            
            while (true) {
                Tokens tokens = lexer.yylex();
                if (tokens == null) {
                    break;
                }
                
                String lexeme = lexer.lexeme;
                
                if (lexeme == null) {
                    System.out.println("Error: lexeme es null en la línea " + lineNumber);
                    continue;
                }
                
                switch (tokens) {
                    case ERROR:
                        resultado += "Símbolo no definido\n";
                        break;
                        
                    case Identificador:
                    case Literal:
                    case Operador:
                    case Reservada:
                        if (!tokenMap.containsKey(lexeme)) {
                            tokenMap.put(lexeme, new ArrayList<>());
                        }
                        tokenMap.get(lexeme).add(lineNumber);
                        tokenTypeMap.put(lexeme, tokens.name());
                        break;
                        
                    default:
                        resultado += "Token Desconocido\n";
                        break;
                }
                
                // Incrementar el contador de líneas si se encuentra un salto de línea
                if (lexeme.contains("\n")) {
                    lineNumber++;
                }
            }
            
            // Formatear la salida para que coincida con la tabla
            resultado += "Token\t\tTipo de Token\t\tLínea\n";
            for (String token : tokenMap.keySet()) {
                resultado += token + "\t\t" + tokenTypeMap.get(token) + "\t\t";
                Map<Integer, Integer> lineCount = new HashMap<>();
                for (int line : tokenMap.get(token)) {
                    lineCount.put(line, lineCount.getOrDefault(line, 0) + 1);
                }
                boolean first = true;
                for (Map.Entry<Integer, Integer> entry : lineCount.entrySet()) {
                    if (!first) {
                        resultado += ", ";
                    }
                    first = false;
                    if (entry.getValue() > 1) {
                        resultado += entry.getKey() + "(" + entry.getValue() + ")";
                    } else {
                        resultado += entry.getKey();
                    }
                }
                resultado += "\n";
            }
            
            txtResultados.setText(resultado);
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(frmPrincipal.class.getName()).log(Level.SEVERE, "Archivo no encontrado", ex);
        } catch (IOException ex) {
            Logger.getLogger(frmPrincipal.class.getName()).log(Level.SEVERE, "Error de IO", ex);
        }
    } else {
        System.out.println("No se seleccionó ningún archivo.");
    }
       
    }//GEN-LAST:event_btnAnalizarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnalizar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtResultados;
    // End of variables declaration//GEN-END:variables
}
