/* The following code was generated by JFlex 1.4.3 on 02/09/24 02:28 PM */

package codigo;
import static codigo.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 02/09/24 02:28 PM from the specification file
 * <tt>C:/Users/brand/Documents/NetBeansProjects/AnalizadorLexico/src/codigo/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\65\2\0\1\3\22\0\1\3\1\71\1\42\1\43"+
    "\1\0\1\71\1\72\1\33\1\20\1\27\1\44\1\17\1\73\1\11"+
    "\1\31\1\64\1\4\6\2\1\30\1\2\1\12\1\73\1\73\1\70"+
    "\1\66\1\67\1\25\1\0\1\15\3\1\1\32\1\16\5\1\1\24"+
    "\10\1\1\22\2\1\1\7\2\1\1\5\1\35\1\10\1\34\1\1"+
    "\1\0\1\13\1\41\1\50\1\54\1\46\1\14\1\56\1\52\1\53"+
    "\1\1\1\47\1\23\1\55\1\36\1\45\1\62\1\1\1\40\1\51"+
    "\1\37\1\21\1\63\1\60\1\6\1\61\1\57\1\73\1\26\1\73"+
    "\1\73\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\3\2\5\2\2"+
    "\1\5\2\2\1\5\1\1\1\5\3\2\1\1\10\2"+
    "\4\5\2\3\3\0\5\2\1\0\3\2\1\0\11\2"+
    "\1\6\1\2\1\6\3\2\1\0\1\7\4\3\3\0"+
    "\5\2\1\0\4\2\1\0\17\2\3\0\2\2\1\0"+
    "\4\2\1\0\10\2\1\10\3\0\2\2\1\0\5\2"+
    "\3\0\1\2\1\0\1\2\115\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[211];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\74\0\u0168"+
    "\0\u01a4\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c\0\u0348"+
    "\0\u0384\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0\0\u04ec\0\u0528"+
    "\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690\0\u06cc\0\u0708"+
    "\0\u0744\0\u0780\0\u07bc\0\u07f8\0\u0834\0\u0870\0\u08ac\0\u08e8"+
    "\0\u0924\0\u0960\0\u099c\0\u09d8\0\u0a14\0\u0a50\0\u0a8c\0\u0ac8"+
    "\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c\0\u0ca8"+
    "\0\170\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c"+
    "\0\u0e88\0\74\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4\0\u0ff0"+
    "\0\u102c\0\u1068\0\u10a4\0\u10e0\0\u111c\0\u1158\0\u1194\0\u11d0"+
    "\0\u120c\0\u1248\0\u1284\0\u12c0\0\u12fc\0\u1338\0\u1374\0\u13b0"+
    "\0\u13ec\0\u1428\0\u1464\0\u14a0\0\u14dc\0\u1518\0\u1554\0\u1590"+
    "\0\u15cc\0\u1608\0\u1644\0\u1680\0\u16bc\0\u16f8\0\u1734\0\u1770"+
    "\0\u17ac\0\u17e8\0\u1824\0\u1860\0\u189c\0\u18d8\0\u1914\0\u1950"+
    "\0\u198c\0\u19c8\0\u1a04\0\u1a40\0\74\0\u1a7c\0\u1ab8\0\u1af4"+
    "\0\u1b30\0\u1b6c\0\u1ba8\0\u1be4\0\u1c20\0\u1c5c\0\u1c98\0\u1cd4"+
    "\0\u1d10\0\u1d4c\0\u1d88\0\u1dc4\0\u1e00\0\u1e3c\0\u1e78\0\u1eb4"+
    "\0\u1ef0\0\u1f2c\0\u1f68\0\u1fa4\0\u1fe0\0\u201c\0\u2058\0\u2094"+
    "\0\u20d0\0\u210c\0\u2148\0\u2184\0\u21c0\0\u21fc\0\u2238\0\u2274"+
    "\0\u22b0\0\u22ec\0\u2328\0\u2364\0\u23a0\0\u23dc\0\u2418\0\u2454"+
    "\0\u2490\0\u24cc\0\u2508\0\u2544\0\u2580\0\u25bc\0\u25f8\0\u2634"+
    "\0\u2670\0\u26ac\0\u26e8\0\u2724\0\u2760\0\u279c\0\u27d8\0\u2814"+
    "\0\u2850\0\u288c\0\u28c8\0\u2904\0\u2940\0\u297c\0\u29b8\0\u29f4"+
    "\0\u2a30\0\u2a6c\0\u2aa8\0\u2ae4\0\u2b20\0\u2b5c\0\u2b98\0\u2bd4"+
    "\0\u2c10\0\u2c4c\0\u2c88\0\u2cc4\0\u2d00\0\u2d3c\0\u2d78\0\u2db4"+
    "\0\u2df0\0\u2e2c\0\u2e68\0\u2ea4\0\u2ee0\0\u2f1c\0\u2f58\0\u2f94"+
    "\0\u2fd0\0\u300c\0\u3048";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[211];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\2\3\1\7"+
    "\1\10\1\4\1\11\1\12\2\3\1\13\1\7\1\14"+
    "\1\3\1\15\1\3\1\7\1\16\1\7\1\4\1\7"+
    "\1\3\1\17\1\20\1\2\1\3\1\21\1\22\1\23"+
    "\1\24\1\2\1\20\1\3\1\25\1\3\1\26\1\27"+
    "\1\3\1\30\1\31\1\3\1\32\1\3\1\33\2\3"+
    "\1\34\1\35\1\5\1\20\1\36\1\37\1\20\1\40"+
    "\1\7\75\0\2\3\1\0\1\3\1\0\2\3\2\0"+
    "\5\3\2\0\4\3\3\0\1\3\1\0\1\3\3\0"+
    "\4\3\3\0\17\3\12\0\1\4\1\0\1\4\5\0"+
    "\1\4\6\0\2\41\2\42\3\0\1\4\1\43\1\44"+
    "\13\0\1\44\30\0\1\5\61\0\1\5\10\0\1\4"+
    "\1\0\1\4\1\45\4\0\1\4\6\0\2\41\2\42"+
    "\3\0\1\4\1\43\1\44\13\0\1\44\36\0\1\7"+
    "\54\0\2\7\5\0\2\3\1\0\1\3\1\0\2\3"+
    "\2\0\5\3\2\0\1\46\3\3\3\0\1\3\1\0"+
    "\1\3\3\0\4\3\3\0\17\3\11\0\2\3\1\0"+
    "\1\3\1\0\2\3\2\0\5\3\2\0\2\3\1\47"+
    "\1\3\3\0\1\3\1\0\1\3\3\0\4\3\3\0"+
    "\1\50\16\3\27\0\1\7\46\0\1\7\6\0\2\3"+
    "\1\0\1\3\1\0\2\3\2\0\5\3\2\0\4\3"+
    "\3\0\1\3\1\0\1\3\3\0\1\51\3\3\3\0"+
    "\17\3\11\0\2\3\1\0\1\3\1\0\2\3\2\0"+
    "\5\3\2\0\4\3\3\0\1\3\1\0\1\3\3\0"+
    "\4\3\3\0\1\52\16\3\36\0\1\7\37\0\1\7"+
    "\25\0\1\53\141\0\1\7\6\0\2\3\1\0\1\3"+
    "\1\0\2\3\2\0\5\3\2\0\4\3\3\0\1\3"+
    "\1\0\1\3\3\0\4\3\3\0\14\3\1\54\2\3"+
    "\11\0\2\3\1\0\1\3\1\0\2\3\2\0\5\3"+
    "\2\0\4\3\3\0\1\3\1\0\1\3\3\0\4\3"+
    "\3\0\1\3\1\55\15\3\11\0\2\3\1\0\1\3"+
    "\1\0\2\3\2\0\5\3\2\0\4\3\3\0\1\3"+
    "\1\0\1\3\3\0\2\3\1\56\1\3\3\0\17\3"+
    "\30\0\1\57\54\0\2\3\1\0\1\3\1\0\1\60"+
    "\1\3\2\0\5\3\2\0\2\3\1\61\1\3\3\0"+
    "\1\3\1\0\1\3\3\0\1\62\3\3\3\0\17\3"+
    "\11\0\2\3\1\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\61\3\3\2\0\4\3\3\0\1\3\1\0\1\3"+
    "\3\0\4\3\3\0\1\63\4\3\1\64\11\3\11\0"+
    "\2\3\1\0\1\3\1\0\2\3\2\0\5\3\2\0"+
    "\4\3\3\0\1\3\1\0\1\3\3\0\1\3\1\65"+
    "\2\3\3\0\5\3\1\66\1\67\4\3\1\70\3\3"+
    "\11\0\2\3\1\0\1\3\1\0\2\3\2\0\2\3"+
    "\1\71\2\3\2\0\4\3\3\0\1\3\1\0\1\3"+
    "\3\0\1\72\3\3\3\0\17\3\11\0\2\3\1\0"+
    "\1\3\1\0\2\3\2\0\5\3\2\0\4\3\3\0"+
    "\1\3\1\0\1\3\3\0\4\3\3\0\1\73\1\74"+
    "\15\3\11\0\2\3\1\0\1\3\1\0\2\3\2\0"+
    "\5\3\2\0\4\3\3\0\1\3\1\0\1\3\3\0"+
    "\4\3\3\0\1\46\16\3\11\0\2\3\1\0\1\3"+
    "\1\0\2\3\2\0\5\3\2\0\4\3\3\0\1\3"+
    "\1\0\1\3\3\0\4\3\3\0\5\3\1\75\11\3"+
    "\11\0\2\3\1\0\1\3\1\0\2\3\2\0\5\3"+
    "\2\0\4\3\3\0\1\3\1\0\1\3\3\0\4\3"+
    "\3\0\1\76\16\3\54\0\1\77\17\0\1\100\1\0"+
    "\1\7\73\0\1\7\1\20\72\0\1\7\1\0\1\20"+
    "\71\0\1\7\3\0\1\7\24\0\2\101\70\0\2\101"+
    "\2\102\51\0\1\103\1\0\1\103\5\0\1\103\15\0"+
    "\1\103\45\0\1\104\1\0\1\104\4\0\1\105\1\104"+
    "\4\0\1\105\10\0\1\104\47\0\1\106\1\0\1\107"+
    "\66\0\2\3\1\0\1\3\1\0\2\3\2\0\5\3"+
    "\2\0\4\3\3\0\1\3\1\0\1\3\3\0\1\3"+
    "\1\110\2\3\3\0\17\3\11\0\2\3\1\0\1\3"+
    "\1\0\2\3\2\0\5\3\2\0\4\3\3\0\1\3"+
    "\1\0\1\3\3\0\4\3\3\0\1\111\16\3\11\0"+
    "\2\3\1\0\1\3\1\0\2\3\2\0\5\3\2\0"+
    "\4\3\3\0\1\3\1\0\1\3\3\0\2\3\1\71"+
    "\1\3\3\0\17\3\11\0\2\3\1\0\1\3\1\0"+
    "\2\3\2\0\5\3\2\0\4\3\3\0\1\3\1\0"+
    "\1\3\3\0\4\3\3\0\4\3\1\112\1\3\1\113"+
    "\10\3\11\0\2\3\1\0\1\3\1\0\2\3\2\0"+
    "\5\3\2\0\4\3\3\0\1\3\1\0\1\3\3\0"+
    "\1\114\3\3\3\0\17\3\15\0\1\115\67\0\2\3"+
    "\1\0\1\3\1\0\2\3\2\0\5\3\2\0\4\3"+
    "\3\0\1\3\1\0\1\3\3\0\4\3\3\0\15\3"+
    "\1\116\1\3\11\0\2\3\1\0\1\3\1\0\2\3"+
    "\2\0\5\3\2\0\4\3\3\0\1\3\1\0\1\3"+
    "\3\0\1\3\1\117\2\3\3\0\11\3\1\120\5\3"+
    "\11\0\2\3\1\0\1\3\1\0\2\3\2\0\5\3"+
    "\2\0\4\3\3\0\1\3\1\0\1\3\3\0\4\3"+
    "\3\0\1\3\1\121\15\3\15\0\1\122\67\0\2\3"+
    "\1\0\1\3\1\0\2\3\2\0\5\3\2\0\4\3"+
    "\3\0\1\3\1\0\1\3\3\0\1\3\1\123\2\3"+
    "\3\0\17\3\11\0\2\3\1\0\1\3\1\0\2\3"+
    "\2\0\5\3\2\0\4\3\3\0\1\3\1\0\1\3"+
    "\3\0\4\3\3\0\4\3\1\124\12\3\11\0\2\3"+
    "\1\0\1\3\1\0\2\3\2\0\5\3\2\0\1\125"+
    "\3\3\3\0\1\3\1\0\1\3\3\0\4\3\3\0"+
    "\17\3\11\0\2\3\1\0\1\3\1\0\2\3\2\0"+
    "\5\3\2\0\4\3\3\0\1\3\1\0\1\3\3\0"+
    "\1\126\3\3\3\0\17\3\11\0\2\3\1\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\50\3\3\2\0\4\3"+
    "\3\0\1\3\1\0\1\3\3\0\4\3\3\0\17\3"+
    "\11\0\2\3\1\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\127\3\3\2\0\4\3\3\0\1\3\1\0\1\3"+
    "\3\0\2\3\1\130\1\3\3\0\17\3\11\0\2\3"+
    "\1\0\1\3\1\0\2\3\2\0\5\3\2\0\4\3"+
    "\3\0\1\3\1\0\1\3\3\0\4\3\3\0\1\131"+
    "\16\3\11\0\2\3\1\0\1\3\1\0\2\3\2\0"+
    "\5\3\2\0\4\3\3\0\1\3\1\0\1\3\3\0"+
    "\4\3\3\0\11\3\1\132\1\133\4\3\11\0\2\3"+
    "\1\0\1\3\1\0\2\3\2\0\5\3\2\0\4\3"+
    "\3\0\1\3\1\0\1\3\3\0\4\3\3\0\6\3"+
    "\1\134\10\3\11\0\2\3\1\0\1\3\1\0\2\3"+
    "\2\0\5\3\2\0\4\3\3\0\1\3\1\0\1\3"+
    "\3\0\1\3\1\71\2\3\3\0\17\3\11\0\2\3"+
    "\1\0\1\3\1\0\2\3\2\0\5\3\2\0\1\135"+
    "\3\3\3\0\1\3\1\0\1\3\3\0\4\3\3\0"+
    "\17\3\11\0\2\3\1\0\1\3\1\0\2\3\2\0"+
    "\2\3\1\136\2\3\2\0\4\3\3\0\1\3\1\0"+
    "\1\3\3\0\4\3\3\0\17\3\11\0\2\3\1\0"+
    "\1\3\1\0\2\3\2\0\5\3\2\0\4\3\3\0"+
    "\1\3\1\0\1\3\3\0\4\3\3\0\6\3\1\137"+
    "\10\3\11\0\2\3\1\0\1\3\1\0\2\3\2\0"+
    "\5\3\2\0\2\3\1\140\1\3\3\0\1\3\1\0"+
    "\1\3\3\0\4\3\3\0\6\3\1\141\10\3\10\0"+
    "\44\77\1\142\27\77\65\100\1\0\6\100\23\0\2\102"+
    "\51\0\1\103\1\0\1\103\5\0\1\103\1\0\1\102"+
    "\1\0\1\102\4\0\2\102\3\0\1\103\1\0\1\44"+
    "\13\0\1\44\27\0\1\104\1\0\1\104\5\0\1\104"+
    "\1\0\1\102\1\0\1\102\4\0\2\102\3\0\1\104"+
    "\45\0\1\104\1\0\1\104\5\0\1\104\15\0\1\104"+
    "\54\0\1\143\71\0\1\144\65\0\2\3\1\0\1\3"+
    "\1\0\2\3\2\0\5\3\2\0\4\3\3\0\1\3"+
    "\1\0\1\3\3\0\4\3\3\0\1\71\16\3\11\0"+
    "\2\3\1\0\1\3\1\0\2\3\2\0\1\3\1\72"+
    "\3\3\2\0\4\3\3\0\1\3\1\0\1\3\3\0"+
    "\4\3\3\0\17\3\11\0\2\3\1\0\1\3\1\0"+
    "\2\3\2\0\5\3\2\0\4\3\3\0\1\3\1\0"+
    "\1\3\3\0\4\3\3\0\6\3\1\145\10\3\11\0"+
    "\2\3\1\0\1\3\1\0\2\3\2\0\5\3\2\0"+
    "\4\3\3\0\1\3\1\0\1\3\3\0\4\3\3\0"+
    "\1\146\16\3\11\0\2\3\1\0\1\3\1\0\2\3"+
    "\2\0\5\3\2\0\4\3\3\0\1\3\1\0\1\3"+
    "\3\0\4\3\3\0\11\3\1\71\5\3\44\0\1\147"+
    "\40\0\2\3\1\0\1\3\1\0\2\3\2\0\5\3"+
    "\2\0\4\3\3\0\1\3\1\0\1\3\3\0\4\3"+
    "\3\0\1\3\1\150\15\3\11\0\2\3\1\0\1\3"+
    "\1\0\2\3\2\0\5\3\2\0\1\151\3\3\3\0"+
    "\1\3\1\0\1\3\3\0\4\3\3\0\17\3\11\0"+
    "\2\3\1\0\1\3\1\0\2\3\2\0\5\3\2\0"+
    "\4\3\3\0\1\3\1\0\1\3\3\0\4\3\3\0"+
    "\6\3\1\152\10\3\11\0\2\3\1\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\153\3\3\2\0\4\3\3\0"+
    "\1\3\1\0\1\3\3\0\4\3\3\0\17\3\44\0"+
    "\1\154\40\0\2\3\1\0\1\3\1\0\2\3\2\0"+
    "\5\3\2\0\4\3\3\0\1\3\1\0\1\3\3\0"+
    "\4\3\3\0\1\3\1\151\15\3\11\0\2\3\1\0"+
    "\1\3\1\0\2\3\2\0\5\3\2\0\4\3\3\0"+
    "\1\3\1\0\1\3\3\0\4\3\3\0\1\3\1\71"+
    "\15\3\11\0\2\3\1\0\1\3\1\0\2\3\2\0"+
    "\5\3\2\0\4\3\3\0\1\3\1\0\1\3\3\0"+
    "\4\3\3\0\10\3\1\71\6\3\11\0\2\3\1\0"+
    "\1\3\1\0\2\3\2\0\5\3\2\0\4\3\3\0"+
    "\1\3\1\0\1\3\3\0\1\3\1\155\2\3\3\0"+
    "\4\3\1\72\12\3\11\0\2\3\1\0\1\3\1\0"+
    "\2\3\2\0\5\3\2\0\4\3\3\0\1\3\1\0"+
    "\1\3\3\0\1\3\1\156\2\3\3\0\17\3\11\0"+
    "\2\3\1\0\1\3\1\0\2\3\2\0\5\3\2\0"+
    "\1\157\3\3\3\0\1\3\1\0\1\3\3\0\4\3"+
    "\3\0\17\3\11\0\2\3\1\0\1\3\1\0\2\3"+
    "\2\0\5\3\2\0\4\3\3\0\1\3\1\0\1\3"+
    "\3\0\2\3\1\72\1\3\3\0\17\3\11\0\2\3"+
    "\1\0\1\3\1\0\2\3\2\0\5\3\2\0\4\3"+
    "\3\0\1\3\1\0\1\3\3\0\1\160\3\3\3\0"+
    "\17\3\11\0\2\3\1\0\1\3\1\0\2\3\2\0"+
    "\5\3\2\0\4\3\3\0\1\3\1\0\1\3\3\0"+
    "\4\3\3\0\1\3\1\161\15\3\11\0\2\3\1\0"+
    "\1\3\1\0\2\3\2\0\5\3\2\0\4\3\3\0"+
    "\1\3\1\0\1\3\3\0\1\3\1\162\2\3\3\0"+
    "\17\3\11\0\2\3\1\0\1\3\1\0\2\3\2\0"+
    "\5\3\2\0\4\3\3\0\1\3\1\0\1\3\3\0"+
    "\3\3\1\137\3\0\17\3\11\0\2\3\1\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\163\3\3\2\0\4\3"+
    "\3\0\1\3\1\0\1\3\3\0\4\3\3\0\17\3"+
    "\11\0\2\3\1\0\1\3\1\0\2\3\2\0\5\3"+
    "\2\0\2\3\1\124\1\3\3\0\1\3\1\0\1\3"+
    "\3\0\4\3\3\0\17\3\11\0\2\3\1\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\164\3\3\2\0\4\3"+
    "\3\0\1\3\1\0\1\3\3\0\4\3\3\0\17\3"+
    "\11\0\2\3\1\0\1\3\1\0\2\3\2\0\5\3"+
    "\2\0\4\3\3\0\1\3\1\0\1\3\3\0\4\3"+
    "\3\0\7\3\1\71\7\3\10\0\64\77\1\165\7\77"+
    "\30\0\1\166\53\0\1\167\64\0\2\3\1\0\1\3"+
    "\1\0\2\3\2\0\5\3\2\0\4\3\3\0\1\3"+
    "\1\0\1\3\3\0\4\3\3\0\11\3\1\132\5\3"+
    "\11\0\2\3\1\0\1\3\1\0\2\3\2\0\5\3"+
    "\2\0\4\3\3\0\1\3\1\0\1\3\3\0\1\71"+
    "\3\3\3\0\17\3\45\0\1\170\37\0\2\3\1\0"+
    "\1\3\1\0\2\3\2\0\5\3\2\0\4\3\3\0"+
    "\1\3\1\0\1\3\3\0\4\3\3\0\7\3\1\171"+
    "\7\3\11\0\2\3\1\0\1\3\1\0\2\3\2\0"+
    "\5\3\2\0\4\3\3\0\1\3\1\0\1\3\3\0"+
    "\2\3\1\146\1\3\3\0\17\3\11\0\2\3\1\0"+
    "\1\3\1\0\2\3\2\0\5\3\2\0\4\3\3\0"+
    "\1\3\1\0\1\3\3\0\4\3\3\0\4\3\1\172"+
    "\12\3\11\0\2\3\1\0\1\3\1\0\2\3\2\0"+
    "\5\3\2\0\4\3\3\0\1\3\1\0\1\3\3\0"+
    "\4\3\3\0\2\3\1\71\14\3\45\0\1\173\37\0"+
    "\2\3\1\0\1\3\1\0\2\3\2\0\5\3\2\0"+
    "\4\3\3\0\1\3\1\0\1\3\3\0\4\3\3\0"+
    "\6\3\1\174\10\3\11\0\2\3\1\0\1\3\1\0"+
    "\2\3\2\0\5\3\2\0\4\3\3\0\1\3\1\0"+
    "\1\3\3\0\4\3\3\0\6\3\1\175\10\3\11\0"+
    "\2\3\1\0\1\3\1\0\2\3\2\0\5\3\2\0"+
    "\4\3\3\0\1\3\1\0\1\3\3\0\4\3\3\0"+
    "\3\3\1\72\13\3\11\0\2\3\1\0\1\3\1\0"+
    "\2\3\2\0\5\3\2\0\4\3\3\0\1\3\1\0"+
    "\1\3\3\0\4\3\3\0\1\3\1\141\15\3\11\0"+
    "\2\3\1\0\1\3\1\0\2\3\2\0\5\3\2\0"+
    "\4\3\3\0\1\3\1\0\1\3\3\0\4\3\3\0"+
    "\1\176\16\3\11\0\2\3\1\0\1\3\1\0\2\3"+
    "\2\0\5\3\2\0\4\3\3\0\1\3\1\0\1\3"+
    "\3\0\4\3\3\0\3\3\1\177\13\3\11\0\2\3"+
    "\1\0\1\3\1\0\2\3\2\0\5\3\2\0\1\200"+
    "\3\3\3\0\1\3\1\0\1\3\3\0\4\3\3\0"+
    "\17\3\11\0\2\3\1\0\1\3\1\0\2\3\2\0"+
    "\5\3\2\0\4\3\3\0\1\3\1\0\1\3\3\0"+
    "\1\3\1\75\2\3\3\0\17\3\20\0\1\201\70\0"+
    "\1\202\121\0\1\203\41\0\2\3\1\0\1\3\1\0"+
    "\2\3\2\0\5\3\2\0\4\3\3\0\1\3\1\0"+
    "\1\3\3\0\4\3\3\0\1\3\1\176\15\3\11\0"+
    "\2\3\1\0\1\3\1\0\2\3\2\0\5\3\2\0"+
    "\4\3\3\0\1\3\1\0\1\3\3\0\1\3\1\204"+
    "\2\3\3\0\17\3\52\0\1\205\32\0\2\3\1\0"+
    "\1\3\1\0\2\3\2\0\5\3\2\0\4\3\3\0"+
    "\1\3\1\0\1\3\3\0\1\206\3\3\3\0\17\3"+
    "\11\0\2\3\1\0\1\3\1\0\2\3\2\0\5\3"+
    "\2\0\4\3\3\0\1\3\1\0\1\3\3\0\4\3"+
    "\3\0\3\3\1\71\13\3\11\0\2\3\1\0\1\3"+
    "\1\0\2\3\2\0\2\3\1\71\2\3\2\0\4\3"+
    "\3\0\1\3\1\0\1\3\3\0\4\3\3\0\17\3"+
    "\11\0\2\3\1\0\1\3\1\0\2\3\2\0\5\3"+
    "\2\0\4\3\3\0\1\3\1\0\1\3\3\0\4\3"+
    "\3\0\5\3\1\71\11\3\11\0\2\3\1\0\1\3"+
    "\1\0\2\3\2\0\5\3\2\0\2\3\1\72\1\3"+
    "\3\0\1\3\1\0\1\3\3\0\4\3\3\0\17\3"+
    "\27\0\1\207\60\0\1\210\77\0\1\211\64\0\2\3"+
    "\1\0\1\3\1\0\2\3\2\0\5\3\2\0\4\3"+
    "\3\0\1\3\1\0\1\3\3\0\4\3\3\0\1\3"+
    "\1\50\15\3\20\0\1\212\64\0\2\3\1\0\1\3"+
    "\1\0\2\3\2\0\5\3\2\0\1\124\3\3\3\0"+
    "\1\3\1\0\1\3\3\0\4\3\3\0\17\3\30\0"+
    "\1\213\64\0\1\214\110\0\1\215\73\0\1\216\52\0"+
    "\1\217\100\0\1\220\116\0\1\221\73\0\1\222\57\0"+
    "\1\223\65\0\1\224\65\0\1\225\73\0\1\226\110\0"+
    "\1\227\62\0\1\230\120\0\1\231\73\0\1\232\45\0"+
    "\1\233\77\0\1\234\116\0\1\235\73\0\1\236\41\0"+
    "\1\237\103\0\1\240\116\0\1\241\73\0\1\242\56\0"+
    "\1\243\61\0\1\244\123\0\1\245\73\0\1\246\56\0"+
    "\1\247\65\0\1\166\71\0\1\250\73\0\1\251\67\0"+
    "\1\252\116\0\1\253\73\0\1\254\65\0\1\255\110\0"+
    "\1\256\73\0\1\257\36\0\1\260\123\0\1\261\73\0"+
    "\1\262\61\0\1\263\60\0\1\264\73\0\1\265\107\0"+
    "\1\266\76\0\1\267\73\0\1\270\54\0\1\271\116\0"+
    "\1\272\104\0\1\273\54\0\1\274\74\0\1\275\107\0"+
    "\1\102\57\0\1\276\110\0\1\277\35\0\1\300\73\0"+
    "\1\301\111\0\1\302\54\0\1\303\113\0\1\304\60\0"+
    "\1\305\72\0\1\306\75\0\1\307\66\0\1\310\76\0"+
    "\1\311\104\0\1\312\71\0\1\102\76\0\1\313\61\0"+
    "\1\314\110\0\1\315\53\0\1\316\111\0\1\317\74\0"+
    "\1\320\57\0\1\321\110\0\1\322\75\0\1\323\71\0"+
    "\1\102\46\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12420];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\33\1\3\0\5\1\1\0"+
    "\3\1\1\0\17\1\1\0\2\1\1\11\2\1\3\0"+
    "\5\1\1\0\4\1\1\0\17\1\3\0\2\1\1\0"+
    "\4\1\1\0\10\1\1\11\3\0\2\1\1\0\5\1"+
    "\3\0\1\1\1\0\1\1\115\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[211];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 164) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 6: 
          { lexeme=yytext(); return Reservada;
          }
        case 9: break;
        case 4: 
          { /*Ignorar espacios en blanco*/
          }
        case 10: break;
        case 5: 
          { lexeme=yytext(); return Operador;
          }
        case 11: break;
        case 2: 
          { lexeme=yytext(); return Identificador;
          }
        case 12: break;
        case 1: 
          { return ERROR;
          }
        case 13: break;
        case 8: 
          { /*Ignorar comentarios de bloque*/
          }
        case 14: break;
        case 7: 
          { /*Ignorar comentarios de línea*/
          }
        case 15: break;
        case 3: 
          { lexeme=yytext(); return Literal;
          }
        case 16: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
